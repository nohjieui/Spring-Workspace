<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- 
		주소 자동완성 도구
		매번 같은 주소(/WEB-INF/views/)를 추가해야하기 때문에 자동완성이 기본적으로 등록되어있음
		- view resolver라는 도구를 등록(spring제공)
		- class : InternalResourceViewResolver
		- prifix : 접두어 / suffix : 접미어
		- return할 파일명을 제시하는 부분에 접두어, 접미어를 붙여서 forward하겠다.
	 -->
	<!-- InternalResourceViewResolver 객체
		-> return 값으로 문자열을 받았을 때 앞(/WEB-INF/views/)뒤(.jsp)에 ()안의 문자가 붙음 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		base-package에 등록된 패키지와 그 하위 패키지 모두 감시(scan)해서 빈으로 등록 가능한 클래스들은 spring-bean으로 등록해둠
		(com.kh.spring패키지 아래에 있는 모든 클래스들을 훑어보면서 어노테이션이(@Controller, @Service...) 있으면 bean객체로 등록해둠)
	 -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!--
		Interceptors : 컨트롤러에 요청이 들어가기 전/후를 나눠서 인터셉터가 중간에 요청을 가로챔
					   스프링에 모든 빈객체에 접근이 가능하며, 일반적으로 로그인체크, 권한체크, 프로그램실행시간 체크 등에 사용된다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- /** : 모든 요청을 의미 -->
				<!-- 위의 url(path="/**")로 요청이 들어왔을때 감지를 할 bean객체를 넣어줌 -->
				<beans:bean class="com.kh.spring.common.interceptor.BoardTypeInterceptor"/>
		</mvc:interceptor>
		
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
				<beans:bean class="com.kh.spring.common.interceptor.LoggingInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 
		1. Interceptor는 dispatcherServlet이 controller를 호출하기 전/후로 끼여들기 때문에
		controller에 전달하기전인 Request와 response의 데이터를 처리하기 용이하며,
		application 전 영역에 사용하는 객체에 대한 설정을 하기에도 좋다.
		
		2. AOP
		
		스프링 요청/응답 흐름
		
		요청(request) -> Filter -> DispatcherServlet(HandlerMapping) -> Interceptor -> Controller -> AOP -> Service ->  Dao
																														|	(DB)
		응답			<- Filter <- DispatcherServlet(ViewResolver)   	<- Interceptor <- Controller <- AOP <- Service <-  Dao
	 -->
	
	<!-- 트랜잭션 처리시 필요한 @Transactional 어노테이션 활성화 시키기
		
		@Transactional : 클래스 혹은 메소드 수행 후에 트랜잭션을 처리하라고 알려주는 어노테이션
	 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<!-- webSocket요청시 핸들러 클래스와 연결하기 -->
	<!-- 추가주석 : 아래에서 선언한 핸들러의 bean설정 -> Controller의 경로를 정확히 설정해준다. -->
	<beans:bean id="chatHandler" class="com.kh.spring.chat.model.websocket.ChatWebsocketHandler"/>
	
	<websocket:handlers>
		<!-- 웹소켓 요청시 요청 주소를 처리할 bean객체 지정 -->
		<!--추가주석 :
			웹소켓 클라이언트가 '/chat' 으로 접속하면
			chatHandler라는 bean으로 처리하겠다는 것(위의 bean 선언과 연결하여)
		 -->
		<websocket:mapping handler="chatHandler" path="/chat"/> <!-- spring아래에 /chat으로 들어오는 경로를 모두 읽어들임 -->
		
		<websocket:handshake-interceptors>
			<!-- 
				interceptors : http통신에서 request와 response를 가로채는 역할
				
				handshake-interceptors : 
					요청 관련 데이터 중 httpSession정보를 가로채서 webSocketSession에게 넣어줌
			 -->
			 <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		
		<!-- SocketJS라이브러리를 이용해서 만들어진 웹소켓 객체임을 의미한다 -->
		<websocket:sockjs/>
	</websocket:handlers>
	
	<!-- 
		HandlerMapping을 통해서 어떤 url로 요청했을 때 어떤 controller가 구동될것인지를 알아내야한다.
		
		xml 형태로 spring bean객체를 만든다면?
		1. 요청때마다 실행될 controller들을 bean으로 등록시켜두기
		 <beans:bean class="com.kh.spring.board.controller.BoardController" id="BoardController"/>
		 <beans:bean class="com.kh.spring.board.controller.ReplyController" id="ReplyController"/>
		 <beans:bean class="com.kh.spring.member.controller.MemberController" id="MemberController"/>
		 ...(등록할 컨트롤러 갯수만큼 bean객체를 등록시켜줘야함)
		 
		2. 어떤 url로 요청이 들어올것을 처리할것인지 매핑시켜줘야한다.
		 <beans:bean class="org.springframework.web.servlet.handler.simpleUrlHandlerMapping">
		 	<bean:property name="mappings">
		 		<bean:prop key="login">memberController</bean:prop>
		 		<bean:prop key="insert">memberController</bean:prop>
		 	</beans:property>
		 </beans:bean>
		 
		위와 같은 방식으로 xml로 bean을 등록한다면, bean 개수가 너무 많아지면 관리가 어려워진다.
		또한 여러 개발자가 같은 xml파일을 수정하면 충돌이 쉽게 발생할 수 있다.
		
		장점 : xml문서에 한눈으로 볼 수 있기때문에 관리의 편의성이 높음
		
		* 어노테이션 방식
		- <context:component-scan>에서 지정한 패키지명(com.kh.spring)의 하위 모든 클래스를 스캔하여
		@Controller와 같은 MVC어노테이션이 붙은 클래스를 자동으로 bean으로 등록해주는 방식
		@Service
		@Repository
		...
		
		단, 내가 직접만든 클래스가 아닐경우(spring에서 제공하는 클래스이거나 컴파일 된 class인 경우) -> 84열 참고
		소스코드 내부를 수정할 수 없기 때문에 코드에 어노테이션을 붙일수가 없다.
		따라서 이 경우에는 xml방식으로 bean을 등록해줘야한다.
	 -->
	 
	 
</beans:beans>























