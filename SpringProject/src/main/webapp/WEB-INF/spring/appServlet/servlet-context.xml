<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- 
		주소 자동완성 도구
		매번 같은 주소(/WEB-INF/views/)를 추가해야하기 때문에 자동완성이 기본적으로 등록되어있음
		- view resolver라는 도구를 등록(spring제공)
		- class : InternalResourceViewResolver
		- prifix : 접두어 / suffix : 접미어
		- return할 파일명을 제시하는 부분에 접두어, 접미어를 붙여서 forward하겠다.
	 -->
	<!-- InternalResourceViewResolver 객체
		-> return 값으로 문자열을 받았을 때 앞(/WEB-INF/views/)뒤(.jsp)에 ()안의 문자가 붙음 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		base-package에 등록된 패키지와 그 하위 패키지 모두 감시(scan)해서 빈으로 등록 가능한 클래스들은 spring-bean으로 등록해둠
		(com.kh.spring패키지 아래에 있는 모든 클래스들을 훑어보면서 어노테이션이(@Controller, @Service) 있으면 bean객체로 등록해둠)
	 -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!--
		Interceptors : 컨트롤러에 요청이 들어가기 전/후를 나눠서 인터셉터가 중간에 요청을 가로챔
					   스프링에 모든 빈객체에 접근이 가능하며, 일반적으로 로그인체크, 권한체크, 프로그램실행시간 체크 등에 사용된다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- /** : 모든 요청을 의미 -->
				<!-- 위의 url(path="/**")로 요청이 들어왔을때 감지를 할 bean객체를 넣어줌 -->
				<beans:bean class="com.kh.spring.common.interceptor.BoardTypeInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	
</beans:beans>
